// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.CandlesHistory.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Candleshistoryservice.
    /// </summary>
    public static partial class CandleshistoryserviceExtensions
    {
            /// <summary>
            /// Pairs for which hisotry can be requested
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetAvailableAssetPairs(this ICandleshistoryservice operations)
            {
                return operations.GetAvailableAssetPairsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pairs for which hisotry can be requested
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetAvailableAssetPairsAsync(this ICandleshistoryservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAvailableAssetPairsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            [System.Obsolete()]
            public static object GetCandlesHistoryBatchOrError(this ICandleshistoryservice operations, GetCandlesHistoryBatchRequest request = default(GetCandlesHistoryBatchRequest))
            {
                return operations.GetCandlesHistoryBatchOrErrorAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete()]
            public static async Task<object> GetCandlesHistoryBatchOrErrorAsync(this ICandleshistoryservice operations, GetCandlesHistoryBatchRequest request = default(GetCandlesHistoryBatchRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCandlesHistoryBatchOrErrorWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Asset's candles history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID
            /// </param>
            /// <param name='priceType'>
            /// Price type. Possible values include: 'Unspecified', 'Bid', 'Ask', 'Mid',
            /// 'Trades'
            /// </param>
            /// <param name='timeInterval'>
            /// Time interval. Possible values include: 'Unspecified', 'Sec', 'Minute',
            /// 'Min5', 'Min15', 'Min30', 'Hour', 'Hour4', 'Hour6', 'Hour12', 'Day',
            /// 'Week', 'Month'
            /// </param>
            /// <param name='fromMoment'>
            /// From moment in ISO 8601 (inclusive)
            /// </param>
            /// <param name='toMoment'>
            /// To moment in ISO 8601 (exclusive)
            /// </param>
            public static object GetCandlesHistoryOrError(this ICandleshistoryservice operations, string assetPairId, CandlePriceType priceType, CandleTimeInterval timeInterval, System.DateTime fromMoment, System.DateTime toMoment)
            {
                return operations.GetCandlesHistoryOrErrorAsync(assetPairId, priceType, timeInterval, fromMoment, toMoment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Asset's candles history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID
            /// </param>
            /// <param name='priceType'>
            /// Price type. Possible values include: 'Unspecified', 'Bid', 'Ask', 'Mid',
            /// 'Trades'
            /// </param>
            /// <param name='timeInterval'>
            /// Time interval. Possible values include: 'Unspecified', 'Sec', 'Minute',
            /// 'Min5', 'Min15', 'Min30', 'Hour', 'Hour4', 'Hour6', 'Hour12', 'Day',
            /// 'Week', 'Month'
            /// </param>
            /// <param name='fromMoment'>
            /// From moment in ISO 8601 (inclusive)
            /// </param>
            /// <param name='toMoment'>
            /// To moment in ISO 8601 (exclusive)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCandlesHistoryOrErrorAsync(this ICandleshistoryservice operations, string assetPairId, CandlePriceType priceType, CandleTimeInterval timeInterval, System.DateTime fromMoment, System.DateTime toMoment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCandlesHistoryOrErrorWithHttpMessagesAsync(assetPairId, priceType, timeInterval, fromMoment, toMoment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this ICandleshistoryservice operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this ICandleshistoryservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets summary trading volumes for the specified asset pair for the last 24
            /// hours.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            public static object Get24HVolumes(this ICandleshistoryservice operations, string assetPairId)
            {
                return operations.Get24HVolumesAsync(assetPairId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets summary trading volumes for the specified asset pair for the last 24
            /// hours.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get24HVolumesAsync(this ICandleshistoryservice operations, string assetPairId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get24HVolumesWithHttpMessagesAsync(assetPairId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets summary trading volumes for all the supported asset pairs for the last
            /// 24 hours.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAll24HVolumes(this ICandleshistoryservice operations)
            {
                return operations.GetAll24HVolumesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets summary trading volumes for all the supported asset pairs for the last
            /// 24 hours.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAll24HVolumesAsync(this ICandleshistoryservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll24HVolumesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets summary trading volumes for the specified asset pair for the time
            /// period since 00:00:00 today (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            public static object GetTodayVolumes(this ICandleshistoryservice operations, string assetPairId)
            {
                return operations.GetTodayVolumesAsync(assetPairId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets summary trading volumes for the specified asset pair for the time
            /// period since 00:00:00 today (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTodayVolumesAsync(this ICandleshistoryservice operations, string assetPairId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodayVolumesWithHttpMessagesAsync(assetPairId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets summary trading volumes for all the supported asset pairs for the last
            /// 24 hours.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllTodayVolumes(this ICandleshistoryservice operations)
            {
                return operations.GetAllTodayVolumesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets summary trading volumes for all the supported asset pairs for the last
            /// 24 hours.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllTodayVolumesAsync(this ICandleshistoryservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTodayVolumesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the last trade price for the specified asset pair. The depth of search
            /// - 5 months since the current date (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            public static object GetLastTradePrice(this ICandleshistoryservice operations, string assetPairId)
            {
                return operations.GetLastTradePriceAsync(assetPairId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the last trade price for the specified asset pair. The depth of search
            /// - 5 months since the current date (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLastTradePriceAsync(this ICandleshistoryservice operations, string assetPairId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLastTradePriceWithHttpMessagesAsync(assetPairId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the last trade price for all the supported asset pairs. The depth of
            /// search - 5 months since the current date (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllLastTradePrices(this ICandleshistoryservice operations)
            {
                return operations.GetAllLastTradePricesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the last trade price for all the supported asset pairs. The depth of
            /// search - 5 months since the current date (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllLastTradePricesAsync(this ICandleshistoryservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLastTradePricesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the relative change for trade price for the specified asset pair and
            /// the time period since 00:00:00 today (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            public static object GetTradePriceTodayChange(this ICandleshistoryservice operations, string assetPairId)
            {
                return operations.GetTradePriceTodayChangeAsync(assetPairId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the relative change for trade price for the specified asset pair and
            /// the time period since 00:00:00 today (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTradePriceTodayChangeAsync(this ICandleshistoryservice operations, string assetPairId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTradePriceTodayChangeWithHttpMessagesAsync(assetPairId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the relative change for trade price for all supported asset pairs and
            /// the time period since 00:00:00 today (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GeAlltTradePriceTodayChange(this ICandleshistoryservice operations)
            {
                return operations.GeAlltTradePriceTodayChangeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the relative change for trade price for all supported asset pairs and
            /// the time period since 00:00:00 today (UTC).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GeAlltTradePriceTodayChangeAsync(this ICandleshistoryservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeAllTradePriceTodayChangeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
